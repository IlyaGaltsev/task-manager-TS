import { FirebaseContext } from 'context/FirebaseContext'
import { AlertDialog } from 'components/AlertDialog'
import { styled } from '@mui/material/styles'
import { useContext, useState } from 'react'
import {
  ListItemAvatar,
  ListSubheader,
  ListItemText,
  CssBaseline,
  Typography,
  IconButton,
  ListItem,
  Toolbar,
  AppBar,
  Avatar,
  Paper,
  List,
  Box,
  Fab
} from '@mui/material'
import {
  TiSocialVimeoCircular,
  TiLockClosed,
  TiThMenu,
  TiPlus
} from 'react-icons/ti'

const messages = [
  {
    id: 1,
    primary: 'Brunch this week?',
    secondary:
      "I'll be in the neighbourhood this week. Let's grab a bite to eat",
    person: '/static/images/avatar/5.jpg'
  },
  {
    id: 2,
    primary: 'Birthday Gift',
    secondary: `Do you have a suggestion for a good present for John on his work
      anniversary. I am really confused & would love your thoughts on it.`,
    person: '/static/images/avatar/1.jpg'
  },
  {
    id: 3,
    primary: 'Recipe to try',
    secondary:
      'I am try out this new BBQ recipe, I think this might be amazing',
    person: '/static/images/avatar/2.jpg'
  },
  {
    id: 4,
    primary: 'Yes!',
    secondary: 'I have the tickets to the ReactConf for this year.',
    person: '/static/images/avatar/3.jpg'
  },
  {
    id: 5,
    primary: "Doctor's Appointment",
    secondary:
      'My appointment for the doctor was rescheduled for next Saturday.',
    person: '/static/images/avatar/4.jpg'
  },
  {
    id: 6,
    primary: 'Discussion',
    secondary: `Menus that are generated by the bottom app bar (such as a bottom
      navigation drawer or overflow menu) open as bottom sheets at a higher elevation
      than the bar.`,
    person: '/static/images/avatar/5.jpg'
  },
  {
    id: 7,
    primary: 'Summer BBQ',
    secondary: `Who wants to have a cookout this weekend? I just got some furniture
      for my backyard and would love to fire up the grill.`,
    person: '/static/images/avatar/1.jpg'
  }
]

const StyledFab = styled(Fab)({
  position: 'absolute',
  zIndex: 1,
  top: -30,
  left: 0,
  right: 0,
  margin: '0 auto'
})

const Desktop = () => {
  const getParamsDisplayName = () => {
    const params = window.location.search.substring(1).split('&')
    let result
    for (let i = 0; i < params.length; i++) {
      if (params[i].split('=')[0] === 'displayName') {
        result = params[i].split('=')[1]
        break
      }
    }
    console.log(result)
    return result
  }

  const displayName = getParamsDisplayName()

  const { firebase } = useContext(FirebaseContext)
  const [open, setOpen] = useState(Boolean(displayName))

  const handleClickOpen = () => {
    setOpen(true)
  }

  const handleClose = () => {
    setOpen(false)
  }

  const logout = () => {
    firebase
      .auth()
      .signOut()
      .then((data: any) => {
        console.log(data)
      })
      .catch((error: any) => {
        console.log(error)
      })
  }

  return (
    <>
      <CssBaseline />
      <Paper
        square
        sx={{ pb: '50px' }}
      >
        <Typography
          variant="h5"
          gutterBottom
          component="div"
          sx={{ p: 2, pb: 0 }}
        >
          Inbox
        </Typography>
        <List sx={{ mb: 2 }}>
          {messages.map(({ id, primary, secondary, person }) => (
            <>
              {id === 1 && (
                <ListSubheader sx={{ bgcolor: 'background.paper' }}>
                  Today
                </ListSubheader>
              )}

              {id === 3 && (
                <ListSubheader sx={{ bgcolor: 'background.paper' }}>
                  Yesterday
                </ListSubheader>
              )}

              <ListItem button>
                <ListItemAvatar>
                  <Avatar
                    alt="Profile Picture"
                    src={person}
                  />
                </ListItemAvatar>
                <ListItemText
                  primary={primary}
                  secondary={secondary}
                />
              </ListItem>
            </>
          ))}
        </List>
      </Paper>
      <AppBar
        position="fixed"
        color="primary"
        sx={{ top: 'auto', bottom: 0 }}
      >
        <Toolbar>
          <IconButton
            color="inherit"
            aria-label="open drawer"
          >
            <TiThMenu />
          </IconButton>
          <StyledFab
            color="secondary"
            aria-label="add"
          >
            <TiPlus />
          </StyledFab>
          <Box sx={{ flexGrow: 1 }} />
          <IconButton color="inherit">
            <TiSocialVimeoCircular />
          </IconButton>
          <IconButton
            color="inherit"
            onClick={logout}
          >
            <TiLockClosed />
          </IconButton>
        </Toolbar>
      </AppBar>
      {(displayName != null) && (
        <AlertDialog
          displayName={displayName}
          open={open}
          setOpen={setOpen}
          handleClose={handleClose}
          handleClickOpen={handleClickOpen}
        />
      )}
    </>
  )
}
export { Desktop }
